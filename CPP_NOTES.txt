

C++ Tutorial 


————————————————————————————
CHAPTER 1 ——>    The History of C++
————————————————————————————


C++ Origin and philosophy - History of C++

The history of C++ is quite interesting. C++ is a general-purpose, high-level programming language developed in 1979 by Bjarne Stroustrup at AT & T Bell Laboratories. C++ was created as an advanced version of the C programming language. It extended the features of C and added new ones including classes and objects, type checking, exception handling, inheritance, polymorphism etc., to the C language.

Origin of the Name “C++”

Let us take a look at the history of the name C++. During the development of the language, C++ (C plus plus) was initially referred to as "new C". Then it was renamed to "C with Classes", which implied that it was a superset of the well-known C language. The final renaming of the language was done in 1983 by Rick Mascitti when it was renamed to "C++". The ++ in C++ comes from the C language. In C language, ++ means incrementing a variable by 1. So, C++ roughly means "one more than C".

Difference Between C and C++

Object-oriented programming : 
Standard libraries :
Function overloading : 
Operator overloading :
Namespace declarations :


————————————————————————————————
CHAPTER 2 ——>    Mechanism of Creating a Program in C++
————————————————————————————————

C++ Environment Setup

1. Text Editor
2. C++ Compiler

When we write code in any computer language, it is not machine-readable since the machine only understands machine code (0/1), so here comes the role of a compiler. C++ compiler compiles your source code into a final executable program (machine code). A compiler is a program that converts instructions into a machine-code or lower-level form so that they can be read and executed by a computer.

Download minGW compiler 
Install two packages 
 mingw32-base
 ming32-gcc-g++
Environment setup


———————————————————————————
CHAPTER 3 ——> C++ Basic Input/Output
———————————————————————————

C++ comes with libraries that provide us with many ways for performing input and output.

C++ Output
In C++, cout sends formatted output to standard output devices, such as the screen. We use the cout object along with the << operator for displaying output.

C++ Input
In C++, cin takes formatted input from standard input devices such as the keyboard. We use the cin object along with the >> operator for taking input.

stream insertion operator “<<” takes place for output and the use of extraction operator “>>” takes place for input.


————————————————————————————————————
CHAPTER 4 ——>    Program Structure and Best Practices in C++
————————————————————————————————————

C++ Comments and C-style Comment in C++

In C++ programming, comments play a crucial role in enhancing the readability, maintainability, and overall understanding of the code. They are special lines that are not executed by the compiler, serving as annotations to explain the purpose, functionality, or any other significant details about the code. Comments are particularly beneficial for both the original developers and others who may need to work with the code in the future.

Types of Comments in C++

Single-Line Comment
Multi-Line Comment

C++ Header Files

Header files contain definitions of function and datatypes in c++. these header files are imported into any C++ program using the preprocessor directive #include. The preprocessor directive tells the compiler to process these files before compilation.

Contents of the Header File in C++

Function Definitions
Data Type Definition
Macros
Classes


Types of C++ Header Files

Pre-existing Header Files
eg #include<iostream>

User-defined Header Files
eg #include “multiply.h”


Standard Header Files And Their Uses

Input/output library
<iostream>
<fstream>

Numerics library
<cmath.h>
<complex.h>

Algorithms library
<algorithm>

Containers library
<vector>
<set>
<map>


Namespaces in C++

There are two students with the same name in a classroom. To distinguish the two students, we need to call them by their names and surnames. A situation like this can occur in C++ as well. It might happen that a function we created with the name sqrt(), but this is already present in the cmath library of C++. In this case, the compiler cannot differentiate between the two function names. Hence, it will yield an error. To avoid this confusion, namespaces are used.

Defining a Namespace in C++

namespace MyNamespace {
        // Function, class, and variable declarations.
}


Using a Namespace in C++

There are three ways to use a namespace in C++:
Using Scope Resolution Operator
Using Directive
Using Declaration


Statements in C++

A computer program is a list of instructions to be executed by a computer. In a programming language, these programming instructions are called statements.

Types of statements in C++
C++ contains the following types of statements:
Labeled statements
Expression statements
Compound statements
Selection statements
Iteration statements
Jump statements
Try-Catch blocks
Declaration statements

Labeled statements
Labeled statements are used to direct the program's control to the given statement from a specific position.


label:
    // block of code 

goto label;      /* Will directly jump to execute.*/
 

Compound statements
A group of statements contained in curly brackets {} is a compound statement.

        
        Example of using if.

        if(condition)
        {
                // Code inside curly braces; multiple statements can be used.
                // It is a compound statement.
        }
        
      
Selection statements
A selection statement selects one of several possible control flows. It helps to provide a way to run code sections on a conditional basis.


switch(expression){
              case condition1 :
                // Code
              break;
                
              case condition2 :
                // Code
              break; 
                
              case condition3 :
                // Code
              break; 
                
              default:
                // Code
}


Iteration statements
In C++, iteration refers to looping through the contents in a container.

for (initialization; condition; final-expression)
{
      // statement
}


Jump statements
Jump statements enable one to modify a program's flow by jumping to a specific section of code.

break;
continue;


return statement
After a function has completed its execution, it returns control to the caller function or passes control to the operating system from the main function.

 return expression(optional);


Exception Handling Statements
The try..catch statement in C++ is used to execute statements with a chance of failing. It's an error-handling strategy written in C++. The try statement describes the code block to be executed, whereas the catch statement deals with any errors arising during the code block's execution.

try{
        // Code
}catch (err){
        // Code
}

throw expression;


Declaration statements
	In a program, the declaration statement establishes a name and associated data type. 
int x;
char c;
string str;




—————————————————————
CHAPTER 5 ——>    Data Dealing in C++
—————————————————————



Data Types in C++

A data type is the type of data a variable can hold. For example, a Boolean variable can have boolean data, and an integer variable can hold integer data.

a. Primary Data types or Basic Data Types 
b. Secondary Data Types
c. User-define Data Types


A. Primary Data Types 

Integer
Float
Char
Double 


B. Derived Datatypes 

 1. ARRAY
 2. STRING
 3. POINTER
 4. FUNCTIONS


C.    User-define Datatypes

    1. STRUCTURE
    2. UNION
CLASS

Modifiers in C++

There are some modifiers in C++ that allow us to alter the meaning of base types like int, char, and double. The modifiers are as follows:
signed - Used for both positive and negative values
unsigned - Used for only positive values
long - Used to increase the size of data-types
short - Used to reduce the size of data-types


Constants in c++

Constants in C++ are the tokens which are defined at the time of initialization and the assigned value cannot be altered or updated after that. There are two methods to define constants in C++.
#define preprocessor directive method
'const' keyword method

Literals
The value stored in a constant variable is known as a literal.

Types of literals:
Integer literals
Floating-point literals
Characters literals
Strings literals
Boolean literals
User-defined literals

Keywords in C++

Keywords in C++ are the collection of reserved words. These are written in lowercase and have a special meaning defined by the compiler. We can’t use them to declare variable names or function names.

There are a total of 95 Keywords in C++.

Variables in C++

Variable is basically the name of the memory location that stores data. Every variable has a data type and a value associated with it which we could change any number of times during program execution and a variable can be reused many times in a program.

Difference Between UNICODE and ASCII

ASCII stands for American Standard Code for Information Interchange and is used for electronic communication.
Unicode stands for Universal Character Set and is maintained by Unicode Consortium.Unicode Consortium is a non-profit corporation that sets the standards for software to be used internationally. The IT industry standardizes Unicode to encode and represent characters in computers and other electronic and communication devices.

Unicode Transformation Format(UTF) is the type of Unicode encoding scheme. Unicode encoding schemes are classified based on the number of bits used to encode the characters. The types of Unicode encoding schemes used at present are UTF-7, UTF-8, UTF-16, and UTF-32 using 7 bits, 8 bits, 16 bits, and 32 bits, respectively, for representing characters.

ASCII uses 8 bits to encode any character, most of them from the English language used in modern-day programming. It is also used in graphic arts to represent clip art or images using characters.
The major disadvantage of ASCII is that it can represent only 256 different characters as it can use only 8 bits. ASCII cannot be used to encode the many types of characters found around the world. Unicode was extended further to UTF-16 and UTF-32 to encode the various types of characters. Therefore, the significant difference between ASCII and Unicode is the number of bits used to encode.


Auto in C++

Type Conversion in C++

Types of Type Conversion
Type conversion is the method of converting one data type to another. There are two types of Type Conversions in C++:
Implicit type conversion, and
Explicit type conversion

Operators in C++

Arithmetic operator
Relational operator
Assignment operator
Logical operator
Bitwise operator
Ternary operator
Special operator

Expressions in C++

Constant Expressions
Integral Expressions
Float Expressions
Pointer Expressions
Relational Expressions
Logical Expressions
Bitwise Expression
Special Assignment Expressions




————————————————————————
CHAPTER 6 ——>    Control Flow in C++
————————————————————————


if Statement
if...else Statement
Nested If else Statement 
Switch Statement 
Do While Loop 
While Loop 
For loop 
Jumping statment


————————————————————————
CHAPTER 7 ——>    Functions in C++
————————————————————————


Functions in C++

There are two types of functions:
User-defined functions
Inbuilt library functions

Library Functions in C++

Character Functions <cctype>

Character Functions 
1. Character Classification Functions
bool isalpha ( char c ):
bool isdigit ( char c ):
bool isupper ( char c ):
bool islower(char c) : 

2. Character Conversion Functions
char tolower ( char c ) 
char toupper ( char c )

 Mathematical Functions in Header file <cmath>

double pow (double base, double exponent):
double sqrt (double x):
double floor (double x):
double round (double x):
double fmin (double x, double y): 
double fmax (double x, double y):

C++ Recursion

Preprocessor Directives in C++



———————————————————————————
CHAPTER 8 ——>    Pointers and References in C++
———————————————————————————

A pointer in C++ is a variable that stores the address (or memory location) of another variable. In other words, a pointer points to the address of another variable.

Pointer Declaration Syntax

datatype *pointer_name;    
// or
datatype* pointer_name; 
// or
datatype * pointer_name;

We use the asterisk (*) symbol to designate a variable as a pointer in C++.


Reference Operator and Dereference Operator

Reference Operator (&)
The reference operator (&) returns the address of any variable.

float a = 23.4;

// using the reference operator
cout << &a;


Dereference Operator (*)
The * symbol, known as the dereference operator when used with pointers, enables us to access the values stored in a variable to which a pointer points.

int var = 45;
int* ptr;

ptr = &var;

// using the dereference operator
cout << "The value returned by ptr is: " << ptr << endl; 
cout << "The value returned by *ptr is: " << *ptr;




———————————————————————————
CHAPTER 9 ——> Compound Data Types in C++
———————————————————————————


Array in C++

Strings in C++
A string in C++ is a type of object representing a collection (or sequence) of different characters. Strings in C++ are a part of the standard string class (std::string).

The syntax to create a string in C++ is quite simple. We use the string keyword to create a string in C++. However, we also need to include the standard string class in our program before using this keyword.
Ex.
string str_name = "This is a C++ string";

Input Functions
getline() 
push_back()
pop_back()

Capacity Functions
length() 
capacity()
resize() 

Union and Enum in C++

———————————————————————————
CHAPTER 10 ——> Object Oriented Programming
———————————————————————————

Procedural Programming and Object Oriented Programming in C++

Procedural programming is a programming language derived from structure programming and based on the concept of calling procedure. The procedures are the functions, routines, or subroutines that consist series of steps to be carried out in the C++ OOPs concept.

The languages used in Procedural Programming are FORTRAN, ALGOL, COBOL, BASIC, Pascal, and C. These languages use a list of instructions to tell the computer what to do step-by-step.

As the name suggests, objects in programming. A programming model is based upon the concepts of objects, or where everything is represented as an object. In OOP, we try to see the whole world as an object.

Some C++ OOPs concepts that act as the basic building block of OOPs are:	
        
Class
Object
Encapsulation
Abstraction
Polymorphism
Inheritance
Dynamic Binding
Message Passing


C++ is an object-oriented programming language that is used to model real-world entities into programs. Object-oriented programming languages achieve this using classes and objects.

Classes and Objects in C++

*********************************************************

Class in c++

A class in C++ is a user-defined type or data structure declared with a keyword class that has data and functions as its members. A class can be used by declaring an instance of that class which is nothing but the object in C++.
A Class is defined by the keyword class followed by a class name (user's choice) and a block of curly brackets with a semicolon after the block. The block starts with access specifiers followed by data members and member functions.

public: members can be accessed outside the class.
private: members cannot be accessed outside the class.
protected: members cannot be accessed(viewed) from outside the class, but can be accessed in inherited classes(sub classes).

Object in C++

A class is merely a blueprint of data. An Object is a data structure that is an instance of a class. So when a class is created no memory is allocated but when an instance is created by declaring an object, memory is then allocated to store data and perform required functions on them. We can visualize trees, birds, and dogs as different classes and their instances like neem tree, peacock, and German shepherd dog respectively.


Constructors in C++

Constructors are special member functions in C++ that are used to initialize objects of a class. They share the same name as the class and do not have a return type, not even void. Constructors are automatically invoked when an object is created.

Types of Constructors:
Default Constructor: It does not take any arguments. If no user-defined constructor is provided, the C++ compiler supplies a default constructor.
Parameterized Constructor: It takes one or more arguments to initialize an object in a specific manner.
Copy Constructor: It is used to create a copy of an existing object of the same class.


Destructor in C++

A destructor is a member function that is invoked automatically when the object goes out of scope or is explicitly destroyed by a call to delete . A destructor has the same name as the class, preceded by a tilde ( ~ ).


*********************************************************

This Pointer in C++

this pointer in C++ stores the address of the class instance, which is called from the member function that enables functions to access the correct object data members.

in simple terms say, whenever class member and parameter member name is same at this time    this pointer used for value transfer into parameter to class member.

#include<iostream>
using namespace std;

class Coordinate {
    
    private:
                int x;
        
public:
                Coordinate (int x) {
                        // Using this pointer inside the constructor
                        // to set values in data members.
                        this->x = x;
                }

                void printCoordinate() {
                        cout<<x<<endl;
                }
};

int main () {
        // Passing x    coordinate in the constructor.
        Coordinate pointA(2);

        // Pointing the coordinates.
        pointA.printCoordinate();
        
        return 0;
}

*********************************************************

Encapsulation in C++

Encapsulation in C++ is defined as the wrapping up of data and information in a single unit.

Encapsulation basic example with this pointer.

Encapsulation with getter setter 

#include <iostream>
#include <string>

using namespace std;

class Person {
private:
string name;
int age;
public:
Person(string name, int age) {
this->name = name;
this->age = age;
}
void setName(string name) {
this->name = name;
}
string getName() {
return name;
}
void setAge(int age) {
this->age = age;
}
int getAge() {
return age;
}
};

int main() {
Person person("John Doe", 30);

cout << "Name: " << person.getName() << endl;
cout << "Age: " << person.getAge() << endl;

person.setName("Jane Doe");
person.setAge(32);

cout << "Name: " << person.getName() << endl;
cout << "Age: " << person.getAge() << endl;

return 0;
}

*********************************************************

Abstraction in C++

Data abstraction is one of the most essential and important features of object-oriented programming in C++. Abstraction means displaying only essential information and hiding the details. Data abstraction refers to providing only essential information about the data to the outside world, hiding the background details or implementation. 

Consider a real-life example of a man driving a car. The man only knows that pressing the accelerator will increase the speed of the car or applying brakes will stop the car but he does not know how on pressing the accelerator the speed is actually increasing, he does not know about the inner mechanism of the car or the implementation of the accelerator, brakes, etc in the car.

Abstraction using Access Specifiers

Members declared as public in a class can be accessed from anywhere in the program.
Members declared as private in a class, can be accessed only from within the class. They are not allowed to be accessed from any part of the code outside the class.
Members declared as protected  in a class can be accessed in this class , derived class but not allowed to be accessed in main function.


*********************************************************

Inheritance in C++

The capability of a class to inherit the properties of some other class is known as Inheritance.The class whose properties are inherited is called the base class, while the class which inherits the properties is known as the derived class.

There are two types of classes in inheritance:
Parent Class or Base Class :- It is a class whose property is inherited by a subclass.
Child Class or Derived Class :- It is a class that inherits the property of another class.

We use inheritance in C++ for the reusability of code from the existing class. C++ strongly supports the concept of reusability. Reusability is yet another essential feature of OOP(Object Oriented Programming).
It is always good to reuse something that already exists rather than trying to create the one that is already present, as it saves time and increases reliability.

There are five types of inheritance in C++:
Single Inheritance
Multilevel inheritance
Multiple inheritance
Hierarchical inheritance    
Hybrid Inheritance


*********************************************************

Polymorphism in C++

Polymorphism means many forms. Polymorphism word is the combination of "poly," which means many + "morphs," which means forms, which together means many forms.
. A real-life example of polymorphism is a person who at the same time can have different characteristics. A man at the same time is a father, a husband, and an employee. So the same person exhibits different behavior in different situations. This is called polymorphism.

Types of Polymorphism
Compile-time Polymorphism
Runtime Polymorphism

1. Compile-Time Polymorphism
Compile-time polymorphism is done by operator overloading or    function overloading. It is also known as "static binding or "early binding".

Overloaded functions are called by comparing the datatypes and number of parameters. This type of information is available to the compiler time. Thus, the suitable function to be called will be chosen by the C++ compiler at compilation time.

Function Overloading

When we have two functions at same class with the same name but different parameters, different functions are called depending on the number and data types of parameters. This is known as Function overloading.

Operator Overloading

When an operator is updated to be used for user-defined data types (objects etc.), this is known as operator overloading. To use operator overloading, at least one operand must be a user-defined data type.

. ,  :: ,  sizeof() ,  * ,    and C++'s single ternary operator, ?    :    , are among the operators that cannot be overloaded.


Runtime Polymorphism

Runtime polymorphism occurs when functions are resolved at runtime rather than compile time when a call to an overridden method is resolved dynamically at runtime rather than compile time. It's also known as late binding or dynamic binding.

Runtime polymorphism is achieved using a combination of function overriding and virtual functions.

Function Overriding without Virtual Keyword
Function Overriding with Virtual Keyword

Pure Virtual Function

*********************************************************

Friend Function in C++

A friend function can be granted special access to private and protected members of a class in C++. They are the non-member functions that can access and manipulate the private and protected members of the class for they are declared as friends.

Templates in C++

A template is a simple yet very powerful tool in C++. The simple idea is to pass the data type as a parameter so that we don’t need to write the same code for different data types.

The templates are one of the most powerful and widely used methods added to C++, allowing us to write generic programs. It allow us to define generic functions and classes. It promote generic programming, meaning the programmer does not need to write the same function or method for different parameters.
We can define a template as a blueprint for creating generic classes and functions. The idea behind the templates in C++ is straightforward. We pass the data type as a parameter, so we don’t need to write the same code for different data types.

Types of Templates in C++
1. Class Templates
2. Functional Templates


*********************************************************

Exception Handling in C++

Errors are the problems that occur in the program due to an illegal operation performed by the user or by the fault of a programmer.
Exception Handling is the process of handling errors and exceptions such that the normal execution of the system is not halted. Exception handling in c++ consists of three keywords namely- try, catch, and throw.

Errors in C++

a. Compile Time Errors
b. Run-Time Errors

try {
    // Block of code to try
    throw exception; 
}
catch () {
    // Block of code to handle errors
}

*********************************************************


File Handling in C++

The fstream library allows us to work with files.
To use the fstream library, include both the standard <iostream> AND the <fstream> header file.

ofstream			Creates and writes to files
ifstream			Reads from files
fstream			A combination of ofstream and ifstream: creates, reads, and writes to files

Create and Write To a File
Read a File



————————————————————————————
CHAPTER 11 ——> another concepts.
————————————————————————————

Static keyword

When a variable is declared as static, space for it gets allocated for the lifetime of the program. Even if the function is called multiple times, space for the static variable is allocated only once and the value of the variable in the previous call gets carried through the next function call. 

We can access any static member without any object.

***********************************

Inline function in c++







 






















      














































