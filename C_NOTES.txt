
C TUTORIAL


————————————————————————————---------
CHAPTER 1 ——>    INTRODUCTION TO C
————————————————————————————----------

HISTORY OF C LANGUAGE.


ANSI    (AMERICAN  NATIONAL STANDARD INSTITUTE )

ALGOL (ALGORITHMIC LANGUAGE)
BCPL (BASIC COMBINED PROGRAMMING LANGUAGE)


IMPORTANCE OF C PROGRAMMING LANGUAGE

INSTALL C

GCC STANDS FOR GNU COMPILER COLLECTIONS. 
MINGW STANDS FOR MINIMAL GNU FOR WINDOWS

        
	GCC
	- VARIOUS KIND OF COMPILER COLLECTIONS FOR PROGRAMMING LANGUAGES.

	MINGW
	- PARTICULAR C AND C++ COMPILING AND ASSEMBLING.


COMPILATION PROCESS IN C

BEFORE DIVING INTO THE TRADITIONAL DEFINITION OF COMPILATION, LET US CONSIDER AN EXAMPLE WHERE THERE IS A PERSON A WHO SPEAKS HINDI LANGUAGE AND PERSON A WANTS TO TALK TO PERSON B WHO ONLY KNOWS ENGLISH LANGUAGE, SO NOW EITHER OF THEM REQUIRES A TRANSLATOR TO TRANSLATE THEIR WORDS TO COMMUNICATE WITH EACH OTHER. THIS PROCESS IS KNOWN AS TRANSLATION, OR IN TERMS OF PROGRAMMING, IT IS KNOWN AS COMPILATION PROCESS.


IDE (INTEGRATED DEVELOPMENT ENVIRONMENT)

COMPILATION PROCESS IN C INVOLVES FOUR STEPS:

PREPROCESSING.        ( COMMENT REMOVAL ).          FILE CONVERT .C      TO    .I      EXTENSION 
COMPILING.                ( SOURCE CODE TO ASSEMBLY ).        FILE CONVERT      .I      TO      .S      EXTENSION
ASSEMBLING.            ( ASSEMBLY TO MACHINE ).          FILE    CONVERT      .S      TO      .O    
LINKING            ( MACHINE CODE (010110101)).      FILE CONVERT      .O      TO        .OUT 


DIFFERENCE BETWEEN COMPILER AND INTERPRETER



—————————————————————————————————————-------------
CHAPTER 2 ——>      BUILDING BLOCK OF C LANGUAGE
—————————————————————————————————————-------------


CHARACTER SET IN C

CHARACTER SET INCLUDES A SET OF VALID CHARACTERS WE CAN USE IN OUR PROGRAM IN DIFFERENT PARTS.

ALPHABETIC CHARACTERS (A-Z, A-Z) :
DIGITS (0-9) : 
SPECIAL CHARACTERS :      * & # 
WHITESPACE CHARACTERS :          
CONTROL CHARACTERS :      
 THESE INCLUDE NON-PRINTABLE CHARACTERS LIKE THE ESCAPE CHARACTER ('\E') AND OTHERS USED FOR CONTROL AND FORMATTING, SUCH AS '\B' (BACKSPACE), '\T' (TAB), AND '\N' (NEWLINE).

ESCAPE SEQUENCES:  \N. \T. 



TOKENS IN C

TOKENS IN C LANGUAGE ARE THE MINOR ELEMENTS OR THE BUILDING BLOCKS USED TO CONSTRUCT OR DEVELOP A C PROGRAM.
 THESE TOKENS IN C ARE MEANINGFUL FOR THE COMPILER.

TYPES OF TOKENS IN C LANGUAGE
TOKENS IN C LANGUAGE CAN BE CLASSIFIED AS:

KEYWORDS
IDENTIFIERS
CONSTANT
SPECIAL CHARACTERS
STRING
OPERATOR


KEYWORDS IN C 

KEYWORDS ARE PRE-DEFINE OR RESERVED WORD THAT HAVE SPECIAL MEANING TO THE COMPILER. THESE ARE PART OF THE SYNTAX AND CANNOT BE USED AS IDENTIFIERS IN THE PROGRAM. A LIST OF KEYWORD IN C OR RESERVED WORD IN THE C PROGRAMMING ARE MENTIONED BELOW : 


IDENTIFIERS IN C

IDENTIFIERS IN C LANGUAGE REPRESENT THE NAMES OF VARIOUS ENTITIES SUCH AS ARRAYS, FUNCTIONS, VARIABLES, USER-DEFINED DATA TYPES, LABELS, ETC.


VALID IDENTIFIERS IN C

LENGTH 
TOTAL_SUM 
_SIZE
NUM1 
NUM_2 

INVALID IDENTIFIERS IN C

5SIZE (IT BEGINS WITH A DIGIT)
\@HELLO (STARTS WITH A SPECIAL CHARACTER OTHER THAN '_')
INT ( IT IS A KEYWORD)
M N (CONTAINS A BLANK SPACE)
M+N (CONTAINS A SPECIAL CHARACTER)

CONSTANTS IN C

VARIABLES HAVING FIXED VALUES THAT DON’T CHANGE AND CANNOT BE CHANGED THROUGHOUT THE EXECUTION OF THE PROGRAM ONCE INITIALISED ARE CALLED CONSTANTS.

IN THE C PROGRAMMING LANGUAGE, A VARIABLE CAN BE USED AS A CONSTANT BY THE FOLLOWING METHODS:

USING CONST KEYWORD.
USING THE #DEFINE PREPROCESSOR.


DATA TYPES AND THEIR RANGES IN C

WHAT ARE DATA TYPES IN C

DATA TYPE IS AN ATTRIBUTE OF DATA WHICH TELLS THE C COMPILER, WHICH TYPE OF DATA A VARIABLE IS HOLDING.
IT CAN BE OF TYPE INTEGER, FLOAT( DECIMAL), CHARACTER , BOOLEAN( TRUE/FALSE ) ETC.
FORMALLY WE USE DATA TYPES TO SPECIFY THE TYPE OF DATA OUR VARIABLES ARE HOLDING.


A. PRIMARY DATA TYPES OR BASIC DATA TYPES 
B. SECONDARY DATA TYPES
C. USER-DEFINE DATA TYPES



SHORT AND LONG
THESE ARE USED TO DEFINE THE AMOUNT OF MEMORY SPACE THAT THE COMPILER WILL ALLOCATE. IN CASE OF SHORT INT, IT IS TYPICALLY 2 BYTES AND IN LONG INT, IT IS 4 BYTES.

SIGNED AND UNSIGNED
THIS ALSO DEALS WITH MEMORY ALLOCATION ONLY BUT IN A DIFFERENT WAY. IN CASE OF SIGNED INT, IT TAKES INTO ACCOUNT BOTH NEGATIVE AND POSITIVE NUMBERS. BUT IN UNSIGNED INT, WE CAN ONLY REPRESENT POSITIVE NUMBERS.



A. PRIMARY DATA TYPES 

INTEGER
FLOATING POINT
CHARACTER
DOUBLE


B. DERIVED DATATYPES 

 1. ARRAY
 2. STRING
 3. POINTER
 4. FUNCTIONS


C.  USER-DEFINE DATATYPES

 1. STRUCTURE
 2. UNION


WHAT IS VARIABLES ?

A VARIABLE IN C IS A NAMED OF STORAGE LOCATION IN MEMORY THAT HOLDS A VALUE,WHICH CAN BE MODIFIED DURING PROGRAM EXECUTION.
VARIABLE IS ONE KIND OF CONTAINER WHICH CAN STORE VARIOUS TYPES OF DATA.


DECLARATION OF VARIABLES IN C

LET'S SAY WE NEED TO CALCULATE THE AREA OF A RECTANGLE. TO MAKE THIS ARITHMETIC CALCULATION, WE NEED TO STORE THE LENGTH AND WIDTH OF THE RECTANGLE. TO STORE THE LENGTH AND WIDTH OF THE RECTANGLE, WE NEED TO ALLOCATE SOME SPACE IN A MEMORY LOCATION FOR THE DATA, AND THE NAME GIVEN TO THAT MEMORY LOCATION IS CALLED VARIABLE.

VARIABLE DECLARATION 
DATA_TYPE VARIABLE_NAME;

VARIABLE INITIALIZATION
 VARIABLE_NAME = VALUE;

DECLARATION OF VARIABLE WITH INITIALISING SOME VALUE TO IT
DATA_TYPE VARIABLE_NAME = VAL;

TYPES OF VARIABLE 
1. LOCAL VARIABLE
2. GLOBAL VARIABLE
3. CONSTANT VARIABLE

Rules for Naming Variables (Identifier Rules) in C
1️⃣ A variable name can only contain letters (A-Z, a-z), digits (0-9), and underscore (_).
✅ Valid: age, marks_1, student_id
❌ Invalid: marks@1, student-id

2️⃣ A variable name cannot start with a digit.
✅ Valid: count1, var_2
❌ Invalid: 1count, 3value

3️⃣ Special characters (@, $, #, etc.) are not allowed in variable names.
✅ Valid: score, total_marks
❌ Invalid: total$marks, #value

4️⃣ C is case-sensitive, meaning Age and age are two different variables.
✅ int Age = 10; and int age = 20; are different variables.

5️⃣ Reserved keywords (like int, float, return, etc.) cannot be used as variable names.
✅ Valid: count, value1
❌ Invalid: int, return, float




COMMENTS IN C

COMMENTS ARE PROGRAM TEXT USED TO EXPLAIN THE PROGRAM LOGIC. THEY ARE IGNORED BY THE COMPILER. COMMENTS HELP TO MAKE OUR CODE MORE READABLE AND MAINTAINABLE. THE COMPILER AND INTERPRETER IGNORE COMMENTS, SO THEY DO NOT AFFECT THE PROGRAM'S BEHAVIOUR OR PERFORMANCE.

TYPES OF C COMMENTS

SINGLE-LINE COMMENTS
MULTI-LINE COMMENTS OR PAIRED COMMENTS



———————————————————————————————————-----
CHAPTER 3 ——>      BASIC INPUT OUTPUT IN C
———————————————————————————————————-----

INPUT AND OUTPUT FUNCTIONS IN C

INPUT REFERS TO FEEDING DATA INTO THE PROGRAM, AND OUTPUT REFERS TO GETTING DATA OUT OF THE PROGRAM. INPUT AND OUTPUT IN C ARE DONE USING THE STANDARD INPUT/OUTPUT LIBRARY, WHICH WE COULD INCLUDE IN THE PROGRAM USING STDIO.H HEADER FILE CONSISTS OF INPUT AND OUTPUT FUNCTIONS IN C LIKE SCANF() FOR INPUT AND PRINTF() FOR OUTPUT. 

PRINTF(“I SEE……I REMEMBERED ”);
PRINTF(“%A”, VARIABLENAME); 
SCANF(“%A”, &VARIABLE); 


FORMAT SPECIFIERS IN C

%C			        FOR CHARACTER TYPE.
%D				FOR SIGNED INTEGER TYPE.
%F				FOR FLOAT TYPE.
%LF				DOUBLE
%P		 		POINTER
%S			        STRING
%LU			UNSIGNED INT

FIRST C PROGRAM

DIFFERENT PARTS OF C PROGRAMS ARE :

HEADER FILE
PREPROCESSOR DIRECTIVES 
MAIN() FUNCTION
VARIABLES
STATEMENTS AND EXPRESSION
COMMENTS

COMMAND LINE ARGUMENTS IN C

THROUGH COMMAND LINE INTERFACE (CLI) , A USER CAN INTERACT WITH THE OPERATING SYSTEM OR APPLICATION BY TYPING THE COMMANDS. AFTER THAT, THE SYSTEM RESPONDS TO THE COMMAND, AND THE USER CAN TYPE THE NEXT COMMAND FOR PERFORMING THE NEXT OPERATION.

MACROS IN C

SUPPOSE WE ARE WORKING ON AN APPLICATION IN C LANGUAGE AND THERE IS ONE VALUE OR AN OBJECT OR SEGMENT OF CODE WHICH WE REQUIRE SO MANY TIMES IN OUR CODE THEN WITH THE HELP OF MACROS WE CAN DEFINE IT ONCE AND USE IT MANY TIMES.

THE SYNTAX OF THE MACRO IS AS SHOWN IN BELOW . HERE, WE WILL HAVE THE THREE COMPONENTS:

#DEFINE    PI    3.14

#DEFINE - PREPROCESSOR DIRECTIVE
PI - MACRO NAME
3.14 - MACRO VALUE

USER-DEFINE MACROS IN C LANGUAGE


#DEFINE MAX 100
#DEFINE MIN 1
#DEFINE GRAVITY 9.8
#DEFINE NAME “TRUELINE”
#DEFINE TRUE 1

PRE-DEFINED MACROS IN C LANGUAGE

__LINE__			            IT CONTAINS THE CURRENT LINE NUMBER ON WHICH THIS MACRO IS USED.            %D
__FILE__				IT CONTAINS THE NAME OF THE FILE WHERE THE CURRENT PROGRAM IS PRESENT.          %S
__DATE__			IT CONTAINS THE CURRENT DATE IN MM DD YYYY FORMAT.          %S
__TIME__			IT CONTAINS THE CURRENT TIME IN HH:MM FORMAT.          %S

#DEFINE AND #INCLUDE IN C

ALL THE STATEMENTS STARTING WITH # (HASH) SYMBOL ARE KNOWN AS PREPROCESSOR DIRECTIVES/COMMANDS THEREFORE, #DEFINE AND #INCLUDE ARE ALSO KNOWN AS PREPROCESSOR DIRECTIVES. PREPROCESSOR DIRECTIVES ARE EXECUTED BEFORE ANY OTHER COMMAND IN OUR PROGRAM. IN A C PROGRAM, WE GENERALLY WRITE ALL THE PREPROCESSOR DIRECTIVES OUTSIDE THE MAIN() FUNCTION AT THE TOP OF OUR C PROGRAM. THE #DEFINE DIRECTIVE IS USED TO DEFINE CONSTANTS OR AN EXPRESSION IN OUR C PROGRAM, WHILE #INCLUDE DIRECTIVE IS USED TO INCLUDE THE CONTENT OF HEADER FILES IN OUR C PROGRAM.

#INCLUDE IS ALSO KNOWN AS A FILE INCLUSION DIRECTIVE.
#DEFINE IS ALSO KNOWN AS A MACROS DIRECTIVE.

#INCLUDE <STDIO.H>
#DEFINE PI 3.14


———————————————————————————————————————----------
CHAPTER 4 ——>    OPERATORS AND EXPRESSIONS IN C
———————————————————————————————————————----------

OPERATORS IN C

C SUPPORTS A RICH SET OF BUILT-IN OPERATORS. OPERATORS ARE SYMBOLS THAT ARE USED TO PERFORM SOME OPERATION OR A SET OF OPERATIONS ON A VARIABLE OR A SET OF VARIABLES. OPERATORS IN C ARE THAT SYMBOLS WHICH WORK ON OPERANDS. OPERATOR IN C LANGUAGE IS USED TO PERFORM SPECIFIC MATHEMATICAL OR LOGICAL COMPUTATIONS ON THE OPERANDS AND IT REDUCES A SINGLE VALUE.

OPERATORS IN C LANGUAGE, ARE CLASSIFIED INTO SEVERAL CATEGORIES.

ARITHMETIC OPERATOR
RELATIONAL OPERATOR
ASSIGNMENT OPERATOR
LOGICAL OPERATOR
BITWISE OPERATOR
TERNARY OPERATOR
SPECIAL OPERATOR


PRECEDENCE(OR PRIORITY) AND ASSOCIATIVITY OF OPERATORS IN C

PRECEDENCE DETERMINES WHICH OPERATOR IS PERFORMED FIRST IN AN EXPRESSION IF THERE ARE MORE THAN ONE OPERATOR OF DIFFERENT PRECEDENCE. ASSOCIATIVITY DETERMINES IN WHICH DIRECTION WE SHOULD START COMPUTING THE OPERATORS HAVING THE SAME PRECEDENCE.

OPERATOR-PRECEDENCE


TYPE CONVERSION
TYPE CONVERSION IN C IS THE PROCESS OF CONVERTING ONE DATA TYPE TO ANOTHER

1. IMPLICIT TYPE CONVERSION
2. EXPLICIT TYPE CONVERSION


————————————————————————————------------
CHAPTER 5 ——>.      FLOW CONTROL IN C
————————————————————————————------------

IF STATEMENT

IF...ELSE STATEMENT

NESTED IF ELSE STATEMENT IN C

SWITCH STATEMENT IN C

DO WHILE LOOP IN C

WHILE LOOP IN C

FOR LOOP IN C



JUMP STATEMENTS IN C

JUMP STATEMENTS INTERRUPT THE NORMAL FLOW OF THE PROGRAM WHILE EXECUTION AND JUMP WHEN IT GETS SATISFIED GIVEN SPECIFIC CONDITIONS. THE MAIN USES OF JUMP STATEMENTS ARE TO EXIT THE LOOPS LIKE FOR, WHILE, DO-WHILE ALSO SWITCH CASE AND EXECUTES THE GIVEN OR NEXT BLOCK OF THE CODE, SKIP THE ITERATIONS OF THE LOOP, CHANGE THE CONTROL FLOW TO SPECIFIC LOCATION, ETC.

TYPES OF JUMP STATEMENT IN C
THERE ARE 4 TYPES OF JUMP STATEMENTS IN C LANGUAGE.
BREAK STATEMENT
CONTINUE STATEMENT
GOTO STATEMENT
RETURN STATEMENT.



———————————————————————----
CHAPTER 6 ——>    ARRAYS IN C
———————————————————————----


AN ARRAY IS A COLLECTION OF ONE OR MORE VALUES OF THE SAME DATA TYPE STORED IN CONTIGUOUS MEMORY LOCATIONS. THE DATA TYPE CAN BE USER-DEFINED OR EVEN ANY OTHER PRIMITIVE DATA-TYPE. ELEMENTS OF AN ARRAY CAN BE ACCESSED WITH THE SAME ARRAY NAME BY SPECIFYING THE INDEX NUMBER AS THE LOCATION IN MEMORY.

TYPES OF ARRAYS

ARRAYS IN C ARE CLASSIFIED INTO THREE TYPES:
ONE-DIMENSIONAL ARRAYS OR SINGLE DIMENSIONAL    ARRAY
TWO-DIMENSIONAL ARRAYS OR MULTI DIMENSIONAL    ARRAY

******************************************************

ONE DIMENSIONAL ARRAY IN C :

WE CAN VISUALISE A ONE-DIMENSIONAL ARRAY IN C AS A SINGLE ROW TO STORE THE ELEMENTS. ALL THE ELEMENTS ARE STORED AT CONTIGUOUS MEMORY LOCATIONS.
 
SYNTAX :
<DATA_TYPE> <ARR_NAME> [ARR_SIZE]={VALUE1, VALUE2, VALUE3,…};

INT ARRAY[5]; 

INT NUMS[5] = {0, 1, 2, 3, 4}; 

COMPILE-TIME INITIALISATION
RUN-TIME INITIALISATION

******************************************************

MULTIDIMENSIONAL ARRAYS IN C    :
AN ARRAY WITH A SINGLE DIMENSION IS KNOWN AS A ONE DIMENSIONAL ARRAY. AN ARRAY THAT HAS A DIMENSION GREATER THAN ONE, IS KNOWN AS A MULTIDIMENSIONAL ARRAY.

SYNTAX:
INT ARR[X][Y] = {{ELE 1, ELE 2, ELE 3} , {ELE 1, ELE 2, ELE 3}};

INT A[10][20];

INT A[2][3] = {{3, 2, 1}, {8, 9, 10}};

ACCESSING THE ELEMENTS OF A 2D ARRAY
CHANGING ELEMENTS IN A 2D ARRAY
LOOPING THROUGH A 2D ARRAY



————————————————————————-----
CHAPTER 7 ——>    STRINGS IN C
————————————————————————-----

WHAT IS A STRING?

A STRING IS A COLLECTION OF CHARACTERS (I.E., LETTERS, NUMERALS, SYMBOLS, AND PUNCTUATION MARKS) IN A LINEAR SEQUENCE. IN C, A STRING IS A SEQUENCE OF CHARACTERS CONCLUDED WITH A NULL CHARACTER '\0'.

CHAR VARIABLE[ARRAY_SIZE];

CHAR STR[5];
CHAR STR2[50];

THERE ARE FOUR METHODS OF INITIALIZING A STRING IN C:
ASSIGNING A STRING LITERAL WITH SIZE.
ASSIGNING A STRING LITERAL WITHOUT SIZE.
ASSIGNING CHARACTER BY CHARACTER WITH SIZE.
ASSIGNING CHARACTER BY CHARACTER WITHOUT SIZE.

CHAR STR[8] = “ TRUELINE.”;
CHAR STR[] = “TRUELINE.”;
CHAR STR[8] = {'T', 'R', 'U', 'E', 'L', 'I', 'N','E','\0'};
CHAR STR[] = {'T', 'R', 'U', 'E', 'L', 'I', 'N','E','\0'};


STRINGS INPUT AND OUTPUT FUNCTIONS IN C

CHAR SENTENCE[20];

HOW TO TAKE INPUT OF A STRING IN C WITHOUT SPACES?
SCANF("%S", SENTENCE);

METHODS TO ACCEPT STRING WITH SPACE IN C
GETS(SENTENCE);
FGETS(SENTENCE, 20, STDIN);



STRING FUNCTIONS:

CHAR COMPANY[] = “TRUE-LINE”;

STRLEN()			IT RETURNS THE STRING'S LENGTH.
STRCMP()			IT COMPARES TWO STRINGS AND RETURNS 0 IF THE STRINGS ARE THE SAME.
STRCAT()			IT CONCATENATES TWO STRINGS AND RETURNS THE CONCATENATED STRING.
STRCPY()			IT COPIES ONE STRING INTO ANOTHER.


——————————————————————————-----
CHAPTER 8 ——>    FUNCTIONS IN C
——————————————————————————-----

FUNCTIONS ARE BLOCKS OF CODE DEFINED IN A PROGRAM TO PERFORM A PARTICULAR TASK. FUNCTIONS JUST NEED TO BE DEFINED ONCE IN THE PROGRAM AND THEN CAN BE USED MULTIPLE TIMES. THE BEST THING ABOUT FUNCTIONS IS THAT THEY CAN BE REUSED AGAIN AND AGAIN THROUGHOUT THE PROGRAM, WHENEVER REQUIRED.

FUNCTION DECLARATIONS

RETURN TYPE:
FUNCTION NAME: 
PARAMETERS:
FUNCTION BODY:


TYPES OF FUNCTIONS IN C
NOW THAT WE HAVE DISCUSSED THE SYNTAX OF FUNCTIONS AND WHY THEY'RE IMPORTANT, LET’S TAKE A LOOK AT THE TYPES OF FUNCTIONS.
DEPENDING ON WHERE THE FUNCTION HAS BEEN DEFINED, FUNCTIONS ARE OF TWO TYPES:

STANDARD LIBRARY FUNCTIONS
USER DEFINED FUNCTIONS

FUNCTION ARGUMENTS AND RETURN VALUES
THERE ARE FOUR DIFFERENT ASPECTS OF FUNCTION CALLS, BASED ON WHETHER A FUNCTION ACCEPTS ARGUMENTS AND/OR RETURNS A VALUE. 

FUNCTION WITHOUT ARGUMENTS AND WITHOUT RETURN VALUE
FUNCTION WITHOUT ARGUMENTS AND WITH RETURN VALUE
FUNCTION WITH ARGUMENTS AND WITHOUT RETURN VALUE
FUNCTION WITH ARGUMENTS AND WITH RETURN VALUE

DIFFERENCE BETWEEN ARGUMENTS AND PARAMETERS IN C

ARGUMENTS AND PARAMETERS ARE OFTEN USED IN DIFFERENT PROGRAMMING LANGUAGES. BUT THERE EXISTS A DIFFERENCE BETWEEN THEM. ARGUMENTS ARE SOME ACTUAL VALUE(S) SUPPLIED DURING THE FUNCTION CALL. PARAMETERS ARE LIKE THE PLACEHOLDERS TO WHICH THE ARGUMENT'S VALUES ARE PASSED, OR YOU CAN SAY THEY ARE USED TO RECEIVE THE ARGUMENTS PASSED DURING A FUNCTION CALL. THE TERM ARGUMENT IS USED EXCESSIVELY DURING THE FUNCTION CALL, AND IT ACTS AS A MEDIUM TO PASS THE VALUE FROM ONE FUNCTION TO OTHER.


CALL BY VALUE AND CALL BY REFERENCE IN C

CALL BY VALUE IN C
CALLING A FUNCTION BY VALUE WILL CAUSE THE PROGRAM TO COPY THE CONTENTS OF AN OBJECT PASSED INTO A FUNCTION. 

CALL BY REFERENCE IN C
CALLING A FUNCTION BY REFERENCE WILL GIVE FUNCTION PARAMETER THE ADDRESS OF ORIGINAL PARAMETER DUE TO WHICH THEY WILL POINT TO SAME MEMORY LOCATION AND ANY CHANGES MADE IN THE FUNCTION PARAMETER WILL ALSO REFLECT IN ORIGINAL PARAMETERS. 


RECURSION IN C

RECURSION IS A PROGRAMMING CONCEPT WHERE A FUNCTION CALLS ITSELF TO SOLVE A PROBLEM BY BREAKING IT DOWN INTO SMALLER, SIMPLER VERSIONS OF THE SAME PROBLEM.

BASE CASE: RECURSION INVOLVES A BASE CASE THAT STOPS THE RECURSIVE CALLS TO PREVENT INFINITE LOOPS, ENSURING PROGRAM TERMINATION.
RECURSIVE CALL THE RECURSIVE CALL IS THE CODE EXECUTED REPEATEDLY INSIDE THE RECURSIVE FUNCTION WHILE MAKING RECURSIVE CALLS.

C PROGRAM TO SHOW INFINITE RECURSIVE FUNCTION. 
C PROGRAM TO CALCULATE FACTORIAL OF A NUMBER USING RECURSION

TYPES OF RECURSION IN C
THERE ARE TWO TYPES OF RECURSION IN THE C LANGUAGE.

DIRECT RECURSION
        
	FUNCTION_01()	
	{
        	//SOME CODE

      	 FUNCTION_01();	
	
        	//SOME CODE
	}


INDIRECT RECURSION

	FUNCTION_01()
	{
        	//SOME CODE
        	FUNCTION_02();		
	}	

	FUNCTION_02()
	{
      	 //SOME CODE
    	 FUNCTION_01();
	}



———————————————————————--------
CHAPTER 9 ——>    POINTERS IN C
———————————————————————--------

POINTER IS ONE KIND OF VARIABLE WHICH IS STORED THE ADDRESS OF THE ANOTHER VARIABLE.

A POINTER IS A VARIABLE THAT HOLDS THE MEMORY ADDRESS OF ANOTHER VARIABLE. WHEN WE DECLARE A VARIABLE OF A SPECIFIC DATA TYPE WE ASSIGN SOME OF THE MEMORY FOR THE VARIABLE WHERE IT CAN STORE IT'S DATA. FOR USING A POINTER IN C , WE NEED TO USE A UNARY OPERATOR '*' BEFORE THE NAME OF THE POINTER VARIABLE TO LET THE COMPILER KNOW THAT THIS IS A POINTER VARIABLE.

INT *B;

NOW TO ASSIGN ADDRESS OF ANOTHER VARIABLE WE USE ANOTHER UNARY OPERATOR THAT IS THE '&' OPERATOR TO ASSIGN THE ADDRESS OF A VARIABLE TO POINTER VARIABLE.

INT A = 10;
INT *B = &A;

IF WE TRY TO PRINT THE VALUE OF P , WE GET A HEXADECIMAL NUMBER ON THE OUTPUT SCREEN WHICH IS NOTHING BUT THE ADDRESS OF THE VARIABLE B.

C – POINTER TO POINTER (DOUBLE POINTER)

A DOUBLE POINTER IN C HOLDS THE MEMORY ADDRESS OF ANOTHER POINTER.
INT VAR = 10;        
INT *PTR = &VAR;
INT **DOUBLE_PTR = &PTR;



——————————————————————————-----------------------------
CHAPTER 10 ——>    USER DEFINED DATA TYPES IN C
——————————————————————————-----------------------------

STRUCTURES IN C

STRUCTURES (ALSO CALLED STRUCTS) ARE A WAY TO GROUP SEVERAL RELATED VARIABLES INTO ONE PLACE. EACH VARIABLE IN THE STRUCTURE IS KNOWN AS A MEMBER OF THE STRUCTURE.TO CREATE A STRUCTURE IN C, THE STRUCT KEYWORD IS USED, FOLLOWED BY THE TAG NAME OF THE STRUCTURE.

C STRUCTURE DECLARATION

METHOD 1

STRUCT STUDENT {
        CHAR NAME[50];
        INT CLASS;
        INT ROLL_NO;
} STUDENT1;


METHOD 2

STRUCT STUDENT {
        CHAR NAME[50];
        INT CLASS;
        INT ROLL_NO;
} ;

SIMPLE STRUCTURE EXAMPLE
LOOPING & ARRAY WITH STRUCTURE 


**********************************


 UNIONS IN C 

A UNION IS A SPECIAL DATA TYPE AVAILABLE IN C THAT ALLOWS TO STORE DIFFERENT DATA TYPES IN THE SAME MEMORY LOCATION.

C UNION DECLARATION

DEFINING UNION VARIABLE WITH DECLARATION
UNION STUDENT {
        CHAR NAME[50];
        INT ROLL_NO;
} STUD1, STUD2;


DEFINING UNION VARIABLE AFTER DECLARATION
UNION STUDENT {
        CHAR NAME[50];
        INT ROLL_NO;
};

UNION STUDENT STUD1, STUD2;


**********************************


C ENUMERATION (ENUM)

ENUMERATOR(ENUM) IS ONE OF THE SPECIAL USER-DEFINED DATATYPE IN C PROGRAMMING LANGUAGE WHICH IS USED TO CREATE AND STORE THE INTEGER CONSTANTS.

ENUM TEXTEDITOR {
        BOLD,
        ITALIC,
        UNDERLINE
};

EXAMPLES OF ENUM DECLARATION


METHOD 1

ENUM TEXTEDITOR {
        BOLD,
        ITALIC,
        UNDERLINE
} FEATURE;


METHOD 2

ENUM TEXTEDITOR {
        BOLD,
        ITALIC,
        UNDERLINE
};

INT MAIN() {
        ENUM TEXTEDITOR FEATURE;
        RETURN 0;
}

FIRST VALUE IS BY DEFAULT 0
THE FIRST ENUM NAME IN THE FOLLOWING DECLARATION IS BY DEFAULT ASSIGNED TO VALUE 0 IF IT IS NOT INITIALIZED AND NEXT ENUM NAMES ARE ASSIGNED BY INCREMENT OF 1.



————————————————————————---------------------
CHAPTER 11 ——>    FILE MANAGEMENT IN C
————————————————————————----------------------

FILE HANDLING IN C STORES DATA OF OUR PROGRAM IN OUR LOCAL STORE, WHICH CAN BE USED AT ANY TIME BECAUSE AS THE EXECUTION OF A PROGRAM COMPLETES, OUR DATA IS LOST. THEREFORE, WE NEED TO SAVE OUR DATA IN ANY FILE FORM - TEXT OR BINARY FILES.
WE CAN PERFORM TASKS LIKE OPENING, READING THE EXISTING FILE, WRITING OR ADDING NEW CONTENT, CREATING A NEW FILE, CLOSING THE FILE, OR EVEN SAVING THE FILE TO A CERTAIN LOCATION USING C.

IN C, YOU CAN CREATE, OPEN, READ, AND WRITE TO FILES BY DECLARING A POINTER OF TYPE FILE, AND USE THE FOPEN() FUNCTION:

FILE *FPTR
FPTR = FOPEN(FILENAME, MODE);

FILE IS BASICALLY A DATA TYPE, AND WE NEED TO CREATE A POINTER VARIABLE TO WORK WITH IT (FPTR).

FILE NAME			THE NAME OF THE ACTUAL FILE YOU WANT TO OPEN (OR CREATE), LIKE FILENAME.TXT

MODE 				A SINGLE CHARACTER, WHICH REPRESENTS WHAT YOU WANT TO DO WITH THE FILE (READ, WRITE OR APPEND):
						W - WRITES TO A FILE
						A - APPENDS NEW DATA TO A FILE
						R - READS FROM A FILE


—————— CREATE A FILE ————————


FILE *FPTR;

FPTR = FOPEN("FILENAME.TXT", "W");

FCLOSE(FPTR);

———————— WRITE TO A FILE ————————

FILE *FPTR;

FPTR = FOPEN("FILENAME.TXT", "W");

FPRINTF(FPTR, "SOME TEXT");

FCLOSE(FPTR);

———————— APPEND CONTENT TO A FILE ————————

FILE *FPTR;

FPTR = FOPEN("FILENAME.TXT", "A");

FPRINTF(FPTR, "\NHI EVERYBODY!");

FCLOSE(FPTR);

———————— READ A FILE ———————— 

FILE *FPTR;

FPTR = FOPEN("FILENAME.TXT", "R");



